#include <iostream>
#include <vector>
#include "curves.h"
const std::wstring logo =   L" *********************************************************************************************************************************************************\n"
                             " *                                             CAD Exchanger   Тестовое задание на позицию C++ разработчика                                              *\n"
                             " *********************************************************************************************************************************************************\n";
const std::wstring info =   L" Программа поддерживает несколько типов 3D геометрических кривых – кругов, эллипсов и 3D спиралей. Каждая кривая возвращает 3D - точку и первую \n"
                             " производную (3D - вектор) для параметра t = PI / 4. Геометрические кривые генерируются случайным образом. Созданные кривые помещаются в контейнер \n"
                             " типа вектор. Второй контейнер вектор заполняется окружностями из первого контейнера, а затем выполняется сортировка второго контейнера по \n"
                             " возрастанию радиуса окружности. Вычисление радиусов окружностей выполнено с помощью библиотеки OpenMP. Реализация программы разделена на библиотеку \n"
                             " curves.dll и исполняемый файл client.exe.\n";
int main() {
    int n = 0;                                                                              // Количество создаваемых кривых.
    double t = M_PI / 4;                                                                    // Параметр t.
    setlocale(LC_ALL, "");
    system("mode 155");
    std::wcout << logo << std::endl;
    std::wcout << info << std::endl;
    std::wcout << L" Введите количество геометрических кривых: ";
    std::wcin >> n;
    if (n <= 0) exit(0);
    std::vector<std::shared_ptr<curve::Curve>> vecCurve;                                    // Контейнер для хранения указателей на кривые.
    std::vector<std::shared_ptr<curve::Circle>> vecCircle;                                  // Контейнер указателей на окружности.
    randomCurveVector(vecCurve, n);                                                         // Заполнение контейнера случайными кривыми.
    std::wcout <<L"\n Таблица 1 - Исходный контейнер кривых" << std::endl;
    std::wcout << curve::header;                                                            // Заголовок таблицы
    for (auto a : vecCurve) {                                                               // Цикл печати контейнера.
        a->print(t);                                                                        // Метод печати кривой.
    }
    std::wcout << curve::endTab;                                                            // Окончание таблицы.
    findCircle(vecCurve, vecCircle);                                                        // Заполнение второго контейнера окружностями из первого.
    std::wcout << L"\n Таблица 2 - Контейнер окружностей" << std::endl;
    std::wcout << curve::header;                                                            // Заголовок таблицы
    for (auto a : vecCircle) {                                                              // Цикл печати контейнера.
        a->print(t);                                                                        // Метод печати кривой.
    }
    std::wcout << curve::endTab;                                                            // Окончание таблицы.
    sortCircleByIncreasingRadius(vecCircle);                                                // Сортировка второго контейнера.
    std::wcout << L"\n Таблица 3 - Отсортированный контейнер окружностей" << std::endl;
    std::wcout << curve::header;                                                            // Заголовок таблицы
    for (auto a : vecCircle) {                                                              // Цикл печати контейнера.
        a->print(t);                                                                        // Метод печати кривой.
    }
    std::wcout << curve::endTab;                                                            // Окончание таблицы.
    std::wcout << L"\n Сумма радиусов окружностей: " << sumRadius(vecCircle) << std::endl;  // Вычисление суммы радиусов.   
    std::wcout << std::endl << " ";
    system("pause/nil");
    return 0;
}
